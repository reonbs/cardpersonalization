@model ZenithCardRepo.Data.DTOs.CardApplicationsDTO
@{


    ViewBag.Title = "Home Page";
}

@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-xs-12">
            <div class="page-title-box">
                <h4 class="page-title">Card Applicaton</h4>
                <div class="clearfix"></div>
            </div>
        </div>
    </div>
    <!-- end row -->

    <div class="row">
        <div class="col-sm-12">
            <div class="card-box">
                <!---Validation msg start-->
                <div class="row">
                    @if (ViewData?.ModelState[""]?.Errors?.Any() == true) //@ViewBag.Error != null
                    {
                        <div class="alert alert-icon alert-danger alert-dismissible fade in" role="alert">
                            <button type="button" class="close" data-dismiss="alert"
                                    aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <i class="mdi mdi-block-helper"></i>
                            @Html.ValidationSummary()
                        </div>

                    }
                    @if (TempData["Message"] as string == "Success")
                    {
                        <div class="alert alert-icon alert-success alert-dismissible fade in" role="alert">
                            <button type="button" class="close" data-dismiss="alert"
                                    aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <i class="mdi mdi-check-all"></i>
                            <span>Your card application was successful</span>
                        </div>
                    }
                </div>
                <!---Validation msg end-->
                <div class="row">
                    <div class="form-group">

                        <div class="col-md-4">
                            @Html.Label("Department", new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.Department, ViewBag.DepartmentView as SelectList, "----Select---", new { @class = "form-control" })
                        </div>

                    </div>
                </div>
                <br />
                <div class="row">


                    <div class="col-md-3">
                        <div class="text-center card-box">

                            <div class="">
                                @*member-card*@
                                <div class="">
                                    @*thumb-xl member-thumb m-b-10 center-block*@
                                    @*<img src="assets/images/users/avatar-1.jpg" class="img-circle img-thumbnail" alt="profile-image">*@
                                    @Html.Hidden("HDImageByte")
                                    <img id="userimage" src="~/images/avatar.png" style="width:180px;" />
                                    <canvas style="display:none;"></canvas>
                                    <i class="mdi mdi-star-circle member-star text-success" title="verified user"></i>
                                </div>
                                <br />
                                <input id="captureImage" type="button" class="btn btn-default" value="Capture Image" />
                                <div class="clearfix"></div>
                            </div>

                        </div> <!-- end card-box -->

                    </div> <!-- end col -->

                    <div class="col-md-9 card-box">

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.TitleCode, new { @class = "control-label" })
                                        @Html.DropDownListFor(m => m.TitleCode, ViewData["TitleCodeView"] as SelectList, "----Select---", new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.FirstName, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.MiddleName, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.LastName, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.Sex, new { @class = "control-label" })
                                        @Html.DropDownListFor(m => m.Sex, ViewData["SexView"] as SelectList, "----Select---", new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.MaritalStatus, new { @class = "control-label" })
                                        @Html.DropDownListFor(m => m.MaritalStatus, ViewData["MaritalStatusView"] as SelectList, "----Select---", new { @class = "form-control" })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.OfficePhoneNo, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.OfficePhoneNo, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>

                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.GSMNo, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.GSMNo, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(m => m.EmailAddress, new { @class = "control-label" })
                                        @Html.EditorFor(m => m.EmailAddress, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>


                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 card-box">
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.MainAccountNo, new { @class = "control-label" })
                            @Html.EditorFor(m => m.MainAccountNo, new { htmlAttributes = new { @class = "form-control" } })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(m => m.OtherAccountNo, new { @class = "control-label" })
                            @Html.EditorFor(m => m.OtherAccountNo, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.NameonCard, new { @class = "control-label" })
                            @Html.EditorFor(m => m.NameonCard, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.IDCardType, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.IDCardType, ViewData["IDCardTypeView"] as SelectList, "----Select---", new { @class = "form-control" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(m => m.IDNo, new { @class = "control-label" })
                            @Html.EditorFor(m => m.IDNo, new { htmlAttributes = new { @class = "form-control" } })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(m => m.IDIssueDate, new { @class = "control-label" })
                            <div class="input-group">
                                @Html.EditorFor(m => m.IDIssueDate, new { htmlAttributes = new { @class = "form-control" } })
                                <span class="input-group-addon bg-custom b-0"><i class="mdi mdi-calendar text-white"></i></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.IDExpiryDate, new { @class = "control-label" })
                            <div class="input-group">
                                @Html.EditorFor(m => m.IDExpiryDate, new { htmlAttributes = new { @class = "form-control" } })
                                <span class="input-group-addon bg-custom b-0"><i class="mdi mdi-calendar text-white"></i></span>
                            </div>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.SocioProfCode, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.SocioProfCode, ViewData["SocioProfCodeView"] as SelectList, "----Select---", new { @class = "form-control" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(m => m.DateofBirth, new { @class = "control-label" })
                            <div class="input-group">
                                @Html.EditorFor(m => m.DateofBirth, new { htmlAttributes = new { @class = "form-control" } })
                                <span class="input-group-addon bg-custom b-0"><i class="mdi mdi-calendar text-white"></i></span>
                            </div>
                        </div>


                        <div class="col-md-3">

                            @Html.LabelFor(m => m.Nationality, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.Nationality, ViewData["NationalityView"] as SelectList, "----Select---", new { @class = "form-control" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.RequestingBranchCode, new { @class = "control-label" })
                            @Html.EditorFor(m => m.RequestingBranchCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.State, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.State, ViewData["StateView"] as SelectList, "----Select---", new { @class = "form-control" })
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(m => m.City, new { @class = "control-label" })
                            @*@Html.DropDownListFor(m => m.City, ViewData["City"] as SelectList, "----Select---", new { @class = "form-control" })*@
                            <select id="City" name="City" class="form-control">
                                <option>---Select---</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(m => m.ProductCode, new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.ProductCode, ViewData["ProductCodeView"] as SelectList, "----Select---", new { @class = "form-control" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(m => m.OfficeAddress1, new { @class = "control-label" })
                            @Html.EditorFor(m => m.OfficeAddress1, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(m => m.OfficeAddress2, new { @class = "control-label" })
                            @Html.EditorFor(m => m.OfficeAddress2, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <!-- end col -->
                    <button id="applicationSBT" type="button" class="btn btn-primary pull-right">Submit</button>
                    <input id="applicationBTN" type="submit" value="Submit" class="notToShow" />
                </div>
            </div>
        </div>
    </div>

    <div id="PictureModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Take Photo</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <select id="videoSource"></select>
                    </div>
                    <hr />
                    @*<div id="my_camera"></div>
                    <div id="my_camera2"></div>
                    <video autoplay="autoplay" style="width:450px; text-align:center;"></video>*@
                    <video autoplay style="width:300px; text-align:center;"></video>
                </div>
                <div class="modal-footer">

                    <input id="takeShot" type=button value="Take Snapshot" class="btn btn-primary">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                </div>
            </div>
        </div>
    </div>

    <div id="validationModal" class="modal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Image Validations</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <ul id="validations"></ul>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts{
    <style type="text/css">
        #results {
            float: right;
            margin: 20px;
            padding: 20px;
            border: 1px solid;
            background: #ccc;
        }
    </style>
    <script type="text/javascript" src="~/webcamjs/webcam.js"></script>

    <!-- Configure a few settings and attach camera -->
    <script language="JavaScript">

    </script>

    <!-- Code to handle taking the snapshot and displaying it locally -->
    <script language="JavaScript">
        $(function () {
            var width = "";
            var heigth = "";

            var videoElement = document.querySelector('video');
            var canvas = document.querySelector('canvas');
            var ctx = canvas.getContext('2d');
            var localMediaStream = null;
            var videoSelect = document.querySelector('select#videoSource');

            $('#checkWebcam').click(function () {
                console.log(Webcam.cameraIDs);
            });

            $.get("@Url.Action("GetImageSetting", "Image",null,Request.Url.Scheme)", function (data) {//'/Image/GetImageSetting'
                console.log(data);
                width = data.Height;//$('#ImageWidth').val(data.Height);
                heigth = data.Width;//$('#ImageHeight').val(data.Width);
                console.log(width + "*" + heigth)
            });

            function run_waitMe(effect) {
                $('body').waitMe({
                    effect: effect,
                    text: 'Please wait...',
                    bg: 'rgba(0,0,0,0.5)',
                    color: '#000',
                    maxSize: '',
                    sourcer: 'img.svg',
                    onClose: function () { }

                });
            }

            $('#verify').click(function () {
                function hasGetUserMedia() {
                    return !!(navigator.getUserMedia || navigator.webkitGetUserMedia ||
                        navigator.mozGetUserMedia || navigator.msGetUserMedia);
                }

                if (hasGetUserMedia()) {
                    // Good to go!
                    alert("Good to go");
                } else {
                    alert('getUserMedia() is not supported in your browser');
                }
            });


            $('#my_camera').hide();

            $('#captureImage').click(function () {
                $('#videoSource').empty();
                $('#PictureModal').modal('show');
                
                navigator.mediaDevices.enumerateDevices().then(gotDevices).then(getStream).catch(handleError);

            });

            $("#takeShot").click(take_snapshot);

            $('#videoSource').on('change', function () {
                getStream();

            });
            // WebCamSettings();
            var videoElement = document.querySelector('video');
            function gotStream(stream) {
                window.stream = stream; // make stream available to console
                videoElement.srcObject = stream;
                localMediaStream = stream;
            }
            function handleError(error) {
                console.log('Error: ', error);
            }

            function take_snapshot() {
                // take snapshot and get image data
                snapshot();
                $('#PictureModal').modal('hide');

                ValidateImage();
            }

            function snapshot() {
                if (localMediaStream) {

                    canvas.width = width;
                    canvas.height = heigth;
                    ctx.drawImage(videoElement, 0, 0);

                    $('#HDImageByte').val(canvas.toDataURL('image/jpeg'));
                    console.log(JSON.stringify(canvas.toDataURL('image/jpeg')));
                    $("#userimage").attr("src", canvas.toDataURL('image/jpeg'));


                }
            }

            function ValidateImage() {
                run_waitMe('roundBounce');

                var img = $('#HDImageByte').val();

                @*$.post("@Url.Action("ValidateImage", "CardApplication")", { HDImageByte: img }, function (data) {//'/CardApplication/ValidateImage/'
                    $('#validationModal ul').empty();

                    $('#validationModal').modal('show');
                    $('body').waitMe("hide");
                    console.log(data);
                    $.each(data, function (i, v) {

                        console.log(v.indexOf('Successful'));
                        if (v.indexOf('Successful') != -1) {
                            $('#validations').append('<li id=' + i + '>' + v + '</li>');
                            $("#" + i).css('color', 'green');
                        } else {
                            $('#validations').append('<li>' + v + '</li>').css('color', 'red');
                        }


                    })
                });*@

                var methodUrl = "@Url.Action("ValidateImage","CardApplication")";
                var dataToSend = JSON.stringify({ HDImageByte: img})
                $.ajax({
                    type: "POST",
                    url: methodUrl,
                    data: dataToSend,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        $('#validationModal ul').empty();

                        $('#validationModal').modal('show');
                        $('body').waitMe("hide");
                        console.log(data);
                        $.each(data, function (i, v) {

                            console.log(v.indexOf('Successful'));
                            if (v.indexOf('Successful') != -1) {
                                $('#validations').append('<li id=' + i + '>' + v + '</li>');
                                $("#" + i).css('color', 'green');
                            } else {
                                $('#validations').append('<li>' + v + '</li>').css('color', 'red');
                            }


                        })
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("error : " + jqXHR);
                    }
                });
            }
            function gotDevices(deviceInfos) {
                $('#videoSource').append('<option>' + '---Select---' + '</option>');
                for (var i = 0; i !== deviceInfos.length; ++i) {
                    var deviceInfo = deviceInfos[i];
                    var option = document.createElement('option');
                    option.value = deviceInfo.deviceId;
                    if (deviceInfo.kind === 'videoinput') {
                        option.text = deviceInfo.label || 'camera ' + (videoSelect.length + 1);
                        $('#videoSource').append(option);
                    } else {
                        console.log('Found one other kind of source/device: ', deviceInfo);
                    }
                }
            }
            function getStream() {
                if (window.stream) {
                    window.stream.getTracks().forEach(function (track) {
                        track.stop();
                    });
                }
                console.log($('#videoSelect option:selected').val());
                var constraints = {
                    //audio: {
                    //    deviceId: { exact: audioSelect.value }
                    //},
                    video: {
                        width: 300,
                        height: 300,
                        deviceId: {
                            exact: $('#videoSource option:selected').val()
                        }
                    }
                };

                navigator.mediaDevices.getUserMedia(constraints).
                    then(gotStream).catch(handleError);
            }

            function gotStream(stream) {
                window.stream = stream; // make stream available to console
                videoElement.srcObject = stream;
                localMediaStream = stream;
            }

            function handleError(error) {
                console.log('Error: ', error);
            }

            $('#IDIssueDate,#IDExpiryDate,#DateofBirth').datepicker({
                format: "dd/mm/yyyy",
                autoclose: true,
                todayHighlight: true
            });

            $('#State').on('change', function () {
                $('#City').empty();
                $('#City').append('<option>--Select--</option>');
                var stateCode = $(this).val();

                $.get("@Url.Action("GetCity", "CardApplication")", { stateCode: stateCode }, function (data) {//'/CardApplication/GetCity/?stateCode=' + stateCode
                    $.each(data, function (i, v) {
                        $('#City').append('<option value="' + v.CityCode + '">' + v.CityName + '</option>')
                    });
                });

            });
        });
    </script>

    <script src="~/Scripts/CardPersoScripts/Index.js"></script>

}